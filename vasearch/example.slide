Golang tutorial for Qiagen
Quick tour of Golang and using it as a webapp for searching variant samples
21 Jan 2016

Paul Schmidt
Paul.Schmidt@Qiagen.com

* Topics covered in this talk
- Golang language introduction
- Golang webapp support
- Qiagen Variant Sample Search Demo using Golang as a webserver plus 3rd party Elasticsearch client
- List of Resources

* Introduction
- Version 1.0 released in 2012 by Google [[https://tour.golang.org]] by Rob Pike, Russ Cox, et al
- Syntax similar to C
- Easy concurrency support
- According to Rob Pike it compiles and runs faster than the Python Interpreter starts. He shows a demo of this in his talk [[https://www.youtube.com/watch?v=uQgWP7zM6mU]] at 15:38 mark [[https://youtu.be/uQgWP7zM6mU?t=938]]
- Object oriented but no such thing as a class
- Statically typed

* Simple Go program
- Variable types can declared explicitly using var <varname> <type>
- Or if inside a function can use the short notation (:=) and type will be assigned
- Lengthy discussion on why Go chose to declare variables this way [[http://blog.golang.org/gos-declaration-syntax]]
.play hello.go

* Functions can return multiple results
- Can choose to ignore some values for example when iterating through an array with the range function you might choose to ignore the array index
.play demo/functions_multiple_results.go

* Slices vs arrays
- Arrays are a fixed size
- Slices point to an array and include a length and can grow via copy or append
.play demo/slices.go

#* Statically typed vs dynamically typed reminder
#.play demo/type_checking.go

* Approach to object oriented programming

- type struct similar to C
- You define methods on types. Any types can have methods even int, float, string, etc
- Method is just a function but with a type receiver argument
- Can pass by reference or by value
#- Functions are values so they can be passed around as arguments
- Supports interfaces and multiple inheritance

* Method example
.play demo/methods_value_receiver.go

* Interface example
There isn't an implements declartion. You implement an interface by implementing its methods
.play demo/interfaces.go  /START OMIT/,/END OMIT/

#* Method using pass by reference example
#.play demo/methods_pointer_receiver.go

#* Function as a value example
#.play demo/filter.go

#* Custom Type example to redefine Abs function on a custom integer
#.play demo/custom_type.go

* Multiple inheritance example
.play demo/multiple_inheritance.go

* Parallelism and Concurrency

- Parallelism - running multiple threads simultaneously.
- Goroutine is a lightweight thread
- Concurrency - coordination of parallel computations. Channels
- Channels block until the other side is ready allowing goroutines to synchronize without locks or condition variables.
- Can still use mutexes to synchronize access to shared data if needed
- Concurrency is not Parallelism (see [[http://blog.golang.org/concurrency-is-not-parallelism]])
#- Garbage Collection is critical for concurrency

* Crude example
.play demo/channels1.go /START OMIT/,/END OMIT/

* Parallel sum example
.play demo/channels_sum.go   /START OMIT/,/END OMIT/

* Advanced Topics
- All necessary runtime components are compiled into the binary. No external dependencies
- Garbage Collected [[https://golang.org/doc/faq#garbage_collection]] using Escape Analysis
- Pointers but no arithmetic make them safe
- Support for closures

* Garbage collection using Escape Analysis
- if a reference to a value escapes the function where it is declared it is put on the heap
- else it is put on the stack it where it will be freed immediately when the function returns
- Very detiled explanation at [[http://dave.cheney.net/2014/06/07/five-things-that-make-go-fast]]
.code demo/escape_analysis.go /START OMIT/,/END OMIT/

* Closure example
A closure is a function value that can reference variables bound to it outside its body
In this example each closure is bound to its own *val* variable
.play demo/closures1.go

* Building a webapp with Go
- A simple webapp using the net/http package
- Serving static files with 3rd party gorilla.mux package
- Variant Sample search webapp using gorilla, dependency injection and olivere elasticsearch client

* Simple webapp using net/http package
.play demo/webapp_simple.go
navigate to [[http://localhost:8087/golang]]

* Serving static pages via Gorilla mux package
- This snippet is not demoable but is used in Variant sample search demo
.code demo/gorilla.go

* Variant sample search demo
- Code [[https://github.com/pschmidt-cloud/vasearch-golang]]
- Utilizes lots of 3rd party libraries like Facebook Inject, olivere elasticsearch, Gorilla mux
- Front end is bootstrap, jquery and RxJs
- Connects to internal elasticsearch server that is indexed with root samples
- Samples were indexed with Java code from 2015 hackathon [[https://github.com/pschmidt-cloud/vasearch]]
- Searches as you type. No Search button.
- Obviously only demoable inside Qiagen network :)
- But screenshot on next page

* Variant sample search screenshot
.image images/vasearch.png 600 800

* Resources
- Rob Pike's video on Golang [[https://www.youtube.com/watch?v=uQgWP7zM6mU]]
- Rob Pike's talk on Golang [[http://web.stanford.edu/class/ee380/Abstracts/100428-pike-stanford.pdf]]
- Russ Cox's talk on concurrency in Golang [[https://www.youtube.com/watch?v=ytEkHepK08c]] with a great example of a concurrent webcrawler
- Get Started with Go [[https://www.youtube.com/watch?v=2KmHtgtEZ1s]]
- Derek Banas' Go Programming [[https://www.youtube.com/watch?v=CF9S4QZuV30]]
- Present golang tool [[https://godoc.org/golang.org/x/tools/present]]
- Lots of tools for profiling, analyzing, etc [[http://dominik.honnef.co/posts/2014/12/an_incomplete_list_of_go_tools/]]
