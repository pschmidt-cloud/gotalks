Golang tutorial for Qiagen
Quick tour of Golang and using it as webapp for searching variant samples
21 Jan 2016

Paul Schmidt
Paul.Schmidt@Qiagen.com

* Topics covered in this talk
- Golang introduction
- Golang webapp support
- 3rd party Elasticsearch client
- Qiagen Variant Sample Search Demo using Golang as a webserver plus 3rd party Elasticsearch client
- List of Resources

* Introduction
- First released in 2009 by Google [[https://tour.golang.org]] by Rob Pike, Russ Cox, et al
- Syntax similar to C
- Convenience of dynamically typed language but statically typed
- According to Rob Pike it compiles and runs faster than the Python Interpreter starts
- Strong and easy concurrency support
- Object oriented but no such thing as a class

* Simple Go program
.play hello.go
Functions can return multiple results
.play demo/functions_multiple_results.go

#* Statically typed vs dynamically typed reminder
#.play demo/type_checking.go

* More
- All necessary runtime components are compiled into the binary. No external dependencies
- Garbage Collected [[https://golang.org/doc/faq#garbage_collection]]
- Pointers but no arithmetic make them safe
- Support for closures
- Lots of tools for profiling, analyzing, etc [[http://dominik.honnef.co/posts/2014/12/an_incomplete_list_of_go_tools/]]

* Closure example
A closure is a function that can be stored as a variable and can reference variables bound to it outside its body
In this example each closure is bound to its own val variable
.play demo/closures1.go

* Approach to object oriented programming

- type struct similar to C
- You define methods on types. Any types can have methods even int, float, string, etc
- Method is just a function but with a type receiver argument
- Can pass by reference or by value
- â€‹Functions can return multiple results
- Functions are are values so they can be passed around like other values

* Method example
.play demo/methods_value_receiver.go

* Method using pass by reference example
.play demo/methods_pointer_receiver.go

* Custom Type example to redefine Abs function on a custom integer
.play demo/custom_type.go

* Parallelism and Concurrency
From Russ Cox's talk

- Parallelism - running multiple things simultaneously. Go subroutines aka goroutine
- Concurrency - coordination of parallel computations. Channels
- Garbage Collection is critical for concurrency

* Concurrency example
.play demo/channels1.go

* Webserver is built into the language
.play demo/webapp_simple.go
navigate to [[http://localhost:8087/golang]]

* Variant sample search demo
- Code [[https://github.com/pschmidt-cloud/vasearch-golang]]
- Utilizes lots of 3rd party libraries like Facebook Inject, olivere elasticsearch, Gorilla mux
- Connects to internal elasticsearch server that is indexed with root samples
- Samples were indexed with Java code from 2015 hackathon [[https://github.com/pschmidt-cloud/vasearch]]
- Obviously only demoable inside Qiagen network :)
- But screenshot on next page

* Variant sample search screenshot
.image images/vasearch.png 600 800

* Resources
- Rob Pike's talk on Golang [[http://web.stanford.edu/class/ee380/Abstracts/100428-pike-stanford.pdf]]
- Russ Cox's talk on concurrency in Golang [[https://www.youtube.com/watch?v=ytEkHepK08c]] with a great example of a concurrent webcrawler
- Present golang tool [[https://godoc.org/golang.org/x/tools/present]]
